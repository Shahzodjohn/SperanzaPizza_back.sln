
///
/// generated by SPToCore on 11/22/2021 15:14:24
///

using System;
using System.Data;
using System.Collections.Generic;
using Microsoft.Data.SqlClient;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using SperanzaPizzaApi.Data;

namespace SperanzaPizzaApi.Models
{
    public partial class SPToCoreContext : dbPizzaContext
    {
        private DbSet<EXPOSE_dm_Addresses_GetByStreetIdResult> EXPOSE_dm_Addresses_GetByStreetId { get; set; }
        private DbSet<EXPOSE_dm_Cities_GetAllResult> EXPOSE_dm_Cities_GetAll { get; set; }
        private DbSet<EXPOSE_dm_Orders_GetAllResult> EXPOSE_dm_Orders_GetAll { get; set; }
        private DbSet<EXPOSE_dm_Orders_GetByIdResult> EXPOSE_dm_Orders_GetById { get; set; }
        private DbSet<EXPOSE_dm_Orders_GetInfoForPaymentResult> EXPOSE_dm_Orders_GetInfoForPayment { get; set; }
        private DbSet<EXPOSE_dm_ProductCategories_GetAllResult> EXPOSE_dm_ProductCategories_GetAll { get; set; }
        private DbSet<EXPOSE_dm_Products_GetAllResult> EXPOSE_dm_Products_GetAll { get; set; }
        private DbSet<EXPOSE_dm_Products_GetByCategoryResult> EXPOSE_dm_Products_GetByCategory { get; set; }
        private DbSet<EXPOSE_dm_Streets_GetByCityIdResult> EXPOSE_dm_Streets_GetByCityId { get; set; }
        private DbSet<EXPOSE_dm_Tokens_CheckResult> EXPOSE_dm_Tokens_Check { get; set; }
        private DbSet<EXPOSE_dm_Users_LoginResult> EXPOSE_dm_Users_Login { get; set; }
        private DbSet<EXPOSE_dm_Users_RegisterResult> EXPOSE_dm_Users_Register { get; set; }
        private DbSet<SaveMessageResult> SaveMessage { get; set; }
        private DbSet<SaveOutgoingMessageResult> SaveOutgoingMessage { get; set; }

        public SPToCoreContext()
        {
        }

        public SPToCoreContext(DbContextOptions<dbPizzaContext> options)
            : base(options)
        {
        }               

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {            
            // No key            
            modelBuilder.Entity<EXPOSE_dm_Addresses_GetByStreetIdResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_Cities_GetAllResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_Orders_GetAllResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_Orders_GetByIdResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_Orders_GetInfoForPaymentResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_ProductCategories_GetAllResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_Products_GetAllResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_Products_GetByCategoryResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_Streets_GetByCityIdResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_Tokens_CheckResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_Users_LoginResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_Users_RegisterResult>().HasNoKey();
            modelBuilder.Entity<SaveMessageResult>().HasNoKey();
            modelBuilder.Entity<SaveOutgoingMessageResult>().HasNoKey();
            //Thanks Valecass!!!
            base.OnModelCreating(modelBuilder);
        }

        public void ChangeAutoStatusOutgoingMessage(int? ID,bool? NoAuto)
        {

                // Parameters
                SqlParameter p_ID = new SqlParameter("@ID", ID ?? (object)DBNull.Value);
                p_ID.Direction = ParameterDirection.Input;
                p_ID.DbType = DbType.Int32;
                p_ID.Size = 4;

                SqlParameter p_NoAuto = new SqlParameter("@NoAuto", NoAuto ?? (object)DBNull.Value);
                p_NoAuto.Direction = ParameterDirection.Input;
                p_NoAuto.DbType = DbType.Boolean;
                p_NoAuto.Size = 1;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[ChangeAutoStatusOutgoingMessage] @ID, @NoAuto";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_ID , p_NoAuto );

            //Return
        }

        public void ChangeColumnProperty(string TableName,string ColumnName,string PropertyName,string PropertyValue)
        {

                // Parameters
                SqlParameter p_TableName = new SqlParameter("@TableName", TableName ?? (object)DBNull.Value);
                p_TableName.Direction = ParameterDirection.Input;
                p_TableName.DbType = DbType.String;
                p_TableName.Size = 256;

                SqlParameter p_ColumnName = new SqlParameter("@ColumnName", ColumnName ?? (object)DBNull.Value);
                p_ColumnName.Direction = ParameterDirection.Input;
                p_ColumnName.DbType = DbType.String;
                p_ColumnName.Size = 256;

                SqlParameter p_PropertyName = new SqlParameter("@PropertyName", PropertyName ?? (object)DBNull.Value);
                p_PropertyName.Direction = ParameterDirection.Input;
                p_PropertyName.DbType = DbType.String;
                p_PropertyName.Size = 256;

                SqlParameter p_PropertyValue = new SqlParameter("@PropertyValue", PropertyValue ?? (object)DBNull.Value);
                p_PropertyValue.Direction = ParameterDirection.Input;
                p_PropertyValue.DbType = DbType.String;
                p_PropertyValue.Size = 2048;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[ChangeColumnProperty] @TableName, @ColumnName, @PropertyName, @PropertyValue";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_TableName , p_ColumnName , p_PropertyName , p_PropertyValue );

            //Return
        }

        public void ChangeDeliveryStatusIncomingMessage(string MessageId,Byte? State)
        {

                // Parameters
                SqlParameter p_MessageId = new SqlParameter("@MessageId", MessageId ?? (object)DBNull.Value);
                p_MessageId.Direction = ParameterDirection.Input;
                p_MessageId.DbType = DbType.String;
                p_MessageId.Size = 1024;

                SqlParameter p_State = new SqlParameter("@State", State ?? (object)DBNull.Value);
                p_State.Direction = ParameterDirection.Input;
                p_State.DbType = DbType.Byte;
                p_State.Size = 1;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[ChangeDeliveryStatusIncomingMessage] @MessageId, @State";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_MessageId , p_State );

            //Return
        }

        public void ChangeTableProperty(string ObjectName,string PropertyName,string PropertyValue)
        {

                // Parameters
                SqlParameter p_ObjectName = new SqlParameter("@ObjectName", ObjectName ?? (object)DBNull.Value);
                p_ObjectName.Direction = ParameterDirection.Input;
                p_ObjectName.DbType = DbType.String;
                p_ObjectName.Size = 256;

                SqlParameter p_PropertyName = new SqlParameter("@PropertyName", PropertyName ?? (object)DBNull.Value);
                p_PropertyName.Direction = ParameterDirection.Input;
                p_PropertyName.DbType = DbType.String;
                p_PropertyName.Size = 256;

                SqlParameter p_PropertyValue = new SqlParameter("@PropertyValue", PropertyValue ?? (object)DBNull.Value);
                p_PropertyValue.Direction = ParameterDirection.Input;
                p_PropertyValue.DbType = DbType.String;
                p_PropertyValue.Size = 2048;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[ChangeTableProperty] @ObjectName, @PropertyName, @PropertyValue";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_ObjectName , p_PropertyName , p_PropertyValue );

            //Return
        }

        public async Task<List<EXPOSE_dm_Addresses_GetByStreetIdResult>> EXPOSE_dm_Addresses_GetByStreetIdAsync(int? streetid,string query)
        {
            //Initialize Result 
            List<EXPOSE_dm_Addresses_GetByStreetIdResult> lst = new List<EXPOSE_dm_Addresses_GetByStreetIdResult>();

                // Parameters
                SqlParameter p_streetid = new SqlParameter("@streetid", streetid ?? (object)DBNull.Value);
                p_streetid.Direction = ParameterDirection.Input;
                p_streetid.DbType = DbType.Int32;
                p_streetid.Size = 4;

                SqlParameter p_query = new SqlParameter("@query", query ?? (object)DBNull.Value);
                p_query.Direction = ParameterDirection.Input;
                p_query.DbType = DbType.String;
                p_query.Size = -1;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Addresses_GetByStreetId] @streetid, @query";
                
                //Output Data
                lst = await this.EXPOSE_dm_Addresses_GetByStreetId.FromSqlRaw(sqlQuery , p_streetid , p_query ).ToListAsync();

            //Return
            return lst;
        }

        public async Task<List<EXPOSE_dm_Cities_GetAllResult>> EXPOSE_dm_Cities_GetAllAsync(string query)
        {
            //Initialize Result 
            List<EXPOSE_dm_Cities_GetAllResult> lst = new List<EXPOSE_dm_Cities_GetAllResult>();

                // Parameters
                SqlParameter p_query = new SqlParameter("@query", query ?? (object)DBNull.Value);
                p_query.Direction = ParameterDirection.Input;
                p_query.DbType = DbType.String;
                p_query.Size = -1;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Cities_GetAll] @query";
                
                //Output Data
                lst = await this.EXPOSE_dm_Cities_GetAll.FromSqlRaw(sqlQuery , p_query ).ToListAsync();

            //Return
            return lst;
        }

        public void EXPOSE_dm_Orders_CreateNewOrder(ref int? orderId,string products,string clientName,string clientPhone,string clientComment,decimal? productCost,decimal? deliveryCost,bool? deliver,int? addressId,string postcode,string flatNumber,string gateCode,bool? asSoonasPossible,TimeSpan? cookingTime,bool? hasInvoice,string clientCompanyName,string nip,bool? cashPayment,string employeeComment,ref string orderIdentifier)
        {

                // Parameters
                SqlParameter p_orderId = new SqlParameter("@orderId", orderId ?? (object)DBNull.Value);
                p_orderId.Direction = ParameterDirection.Output;
                p_orderId.DbType = DbType.Int32;
                p_orderId.Size = 4;

                SqlParameter p_products = new SqlParameter("@products", products ?? (object)DBNull.Value);
                p_products.Direction = ParameterDirection.Input;
                p_products.DbType = DbType.String;
                p_products.Size = -1;

                SqlParameter p_clientName = new SqlParameter("@clientName", clientName ?? (object)DBNull.Value);
                p_clientName.Direction = ParameterDirection.Input;
                p_clientName.DbType = DbType.String;
                p_clientName.Size = 400;

                SqlParameter p_clientPhone = new SqlParameter("@clientPhone", clientPhone ?? (object)DBNull.Value);
                p_clientPhone.Direction = ParameterDirection.Input;
                p_clientPhone.DbType = DbType.String;
                p_clientPhone.Size = 90;

                SqlParameter p_clientComment = new SqlParameter("@clientComment", clientComment ?? (object)DBNull.Value);
                p_clientComment.Direction = ParameterDirection.Input;
                p_clientComment.DbType = DbType.String;
                p_clientComment.Size = -1;

                SqlParameter p_productCost = new SqlParameter("@productCost", productCost ?? (object)DBNull.Value);
                p_productCost.Direction = ParameterDirection.Input;
                p_productCost.DbType = DbType.Decimal;
                p_productCost.Size = 9;

                SqlParameter p_deliveryCost = new SqlParameter("@deliveryCost", deliveryCost ?? (object)DBNull.Value);
                p_deliveryCost.Direction = ParameterDirection.Input;
                p_deliveryCost.DbType = DbType.Decimal;
                p_deliveryCost.Size = 9;

                SqlParameter p_deliver = new SqlParameter("@deliver", deliver ?? (object)DBNull.Value);
                p_deliver.Direction = ParameterDirection.Input;
                p_deliver.DbType = DbType.Boolean;
                p_deliver.Size = 1;

                SqlParameter p_addressId = new SqlParameter("@addressId", addressId ?? (object)DBNull.Value);
                p_addressId.Direction = ParameterDirection.Input;
                p_addressId.DbType = DbType.Int32;
                p_addressId.Size = 4;

                SqlParameter p_postcode = new SqlParameter("@postcode", postcode ?? (object)DBNull.Value);
                p_postcode.Direction = ParameterDirection.Input;
                p_postcode.DbType = DbType.String;
                p_postcode.Size = 512;

                SqlParameter p_flatNumber = new SqlParameter("@flatNumber", flatNumber ?? (object)DBNull.Value);
                p_flatNumber.Direction = ParameterDirection.Input;
                p_flatNumber.DbType = DbType.String;
                p_flatNumber.Size = 512;

                SqlParameter p_gateCode = new SqlParameter("@gateCode", gateCode ?? (object)DBNull.Value);
                p_gateCode.Direction = ParameterDirection.Input;
                p_gateCode.DbType = DbType.String;
                p_gateCode.Size = 512;

                SqlParameter p_asSoonasPossible = new SqlParameter("@asSoonasPossible", asSoonasPossible ?? (object)DBNull.Value);
                p_asSoonasPossible.Direction = ParameterDirection.Input;
                p_asSoonasPossible.DbType = DbType.Boolean;
                p_asSoonasPossible.Size = 1;

                SqlParameter p_cookingTime = new SqlParameter("@cookingTime", cookingTime ?? (object)DBNull.Value);
                p_cookingTime.Direction = ParameterDirection.Input;
                p_cookingTime.DbType = DbType.Time;
                p_cookingTime.Size = 3;

                SqlParameter p_hasInvoice = new SqlParameter("@hasInvoice", hasInvoice ?? (object)DBNull.Value);
                p_hasInvoice.Direction = ParameterDirection.Input;
                p_hasInvoice.DbType = DbType.Boolean;
                p_hasInvoice.Size = 1;

                SqlParameter p_clientCompanyName = new SqlParameter("@clientCompanyName", clientCompanyName ?? (object)DBNull.Value);
                p_clientCompanyName.Direction = ParameterDirection.Input;
                p_clientCompanyName.DbType = DbType.String;
                p_clientCompanyName.Size = 200;

                SqlParameter p_nip = new SqlParameter("@nip", nip ?? (object)DBNull.Value);
                p_nip.Direction = ParameterDirection.Input;
                p_nip.DbType = DbType.String;
                p_nip.Size = 20;

                SqlParameter p_cashPayment = new SqlParameter("@cashPayment", cashPayment ?? (object)DBNull.Value);
                p_cashPayment.Direction = ParameterDirection.Input;
                p_cashPayment.DbType = DbType.Boolean;
                p_cashPayment.Size = 1;

                SqlParameter p_employeeComment = new SqlParameter("@employeeComment", employeeComment ?? (object)DBNull.Value);
                p_employeeComment.Direction = ParameterDirection.Input;
                p_employeeComment.DbType = DbType.String;
                p_employeeComment.Size = 512;

                SqlParameter p_orderIdentifier = new SqlParameter("@orderIdentifier", orderIdentifier ?? (object)DBNull.Value);
                p_orderIdentifier.Direction = ParameterDirection.Output;
                p_orderIdentifier.DbType = DbType.String;
                p_orderIdentifier.Size = 512;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Orders_CreateNewOrder] @orderId OUTPUT, @products, @clientName, @clientPhone, @clientComment, @productCost, @deliveryCost, @deliver, @addressId, @postcode, @flatNumber, @gateCode, @asSoonasPossible, @cookingTime, @hasInvoice, @clientCompanyName, @nip, @cashPayment, @employeeComment, @orderIdentifier OUTPUT";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_orderId , p_products , p_clientName , p_clientPhone , p_clientComment , p_productCost , p_deliveryCost , p_deliver , p_addressId , p_postcode , p_flatNumber , p_gateCode , p_asSoonasPossible , p_cookingTime , p_hasInvoice , p_clientCompanyName , p_nip , p_cashPayment , p_employeeComment , p_orderIdentifier );
                
                //Output Params
                orderId = (int?)p_orderId.Value;
                orderIdentifier = (string)p_orderIdentifier.Value;

            //Return
        }

        public async Task<List<EXPOSE_dm_Orders_GetAllResult>> EXPOSE_dm_Orders_GetAllAsync()
        {
            //Initialize Result 
            List<EXPOSE_dm_Orders_GetAllResult> lst = new List<EXPOSE_dm_Orders_GetAllResult>();


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Orders_GetAll] ";
                
                //Output Data
                lst = await this.EXPOSE_dm_Orders_GetAll.FromSqlRaw(sqlQuery ).ToListAsync();

            //Return
            return lst;
        }

        public async Task<List<EXPOSE_dm_Orders_GetByIdResult>> EXPOSE_dm_Orders_GetByIdAsync(int? orderId)
        {
            //Initialize Result 
            List<EXPOSE_dm_Orders_GetByIdResult> lst = new List<EXPOSE_dm_Orders_GetByIdResult>();

                // Parameters
                SqlParameter p_orderId = new SqlParameter("@orderId", orderId ?? (object)DBNull.Value);
                p_orderId.Direction = ParameterDirection.Input;
                p_orderId.DbType = DbType.Int32;
                p_orderId.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Orders_GetById] @orderId";
                
                //Output Data
                lst = await this.EXPOSE_dm_Orders_GetById.FromSqlRaw(sqlQuery , p_orderId ).ToListAsync();

            //Return
            return lst;
        }

        public async Task<List<EXPOSE_dm_Orders_GetInfoForPaymentResult>> EXPOSE_dm_Orders_GetInfoForPaymentAsync(int? orderId)
        {
            //Initialize Result 
            List<EXPOSE_dm_Orders_GetInfoForPaymentResult> lst = new List<EXPOSE_dm_Orders_GetInfoForPaymentResult>();

                // Parameters
                SqlParameter p_orderId = new SqlParameter("@orderId", orderId ?? (object)DBNull.Value);
                p_orderId.Direction = ParameterDirection.Input;
                p_orderId.DbType = DbType.Int32;
                p_orderId.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Orders_GetInfoForPayment] @orderId";
                
                //Output Data
                lst = await this.EXPOSE_dm_Orders_GetInfoForPayment.FromSqlRaw(sqlQuery , p_orderId ).ToListAsync();

            //Return
            return lst;
        }

        public async Task<List<EXPOSE_dm_ProductCategories_GetAllResult>> EXPOSE_dm_ProductCategories_GetAllAsync()
        {
            //Initialize Result 
            List<EXPOSE_dm_ProductCategories_GetAllResult> lst = new List<EXPOSE_dm_ProductCategories_GetAllResult>();


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_ProductCategories_GetAll] ";
                
                //Output Data
                lst = await this.EXPOSE_dm_ProductCategories_GetAll.FromSqlRaw(sqlQuery ).ToListAsync();

            //Return
            return lst;
        }

        public async Task<List<EXPOSE_dm_Products_GetAllResult>> EXPOSE_dm_Products_GetAllAsync(string query)
        {
            //Initialize Result 
            List<EXPOSE_dm_Products_GetAllResult> lst = new List<EXPOSE_dm_Products_GetAllResult>();

                // Parameters
                SqlParameter p_query = new SqlParameter("@query", query ?? (object)DBNull.Value);
                p_query.Direction = ParameterDirection.Input;
                p_query.DbType = DbType.String;
                p_query.Size = -1;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Products_GetAll] @query";
                
                //Output Data
                lst = await this.EXPOSE_dm_Products_GetAll.FromSqlRaw(sqlQuery , p_query ).ToListAsync();

            //Return
            return lst;
        }

        public async Task<List<EXPOSE_dm_Products_GetByCategoryResult>> EXPOSE_dm_Products_GetByCategoryAsync(int? categoryId,string query)
        {
            //Initialize Result 
            List<EXPOSE_dm_Products_GetByCategoryResult> lst = new List<EXPOSE_dm_Products_GetByCategoryResult>();

                // Parameters
                SqlParameter p_categoryId = new SqlParameter("@categoryId", categoryId ?? (object)DBNull.Value);
                p_categoryId.Direction = ParameterDirection.Input;
                p_categoryId.DbType = DbType.Int32;
                p_categoryId.Size = 4;

                SqlParameter p_query = new SqlParameter("@query", query ?? (object)DBNull.Value);
                p_query.Direction = ParameterDirection.Input;
                p_query.DbType = DbType.String;
                p_query.Size = -1;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Products_GetByCategory] @categoryId, @query";
                
                //Output Data
                lst = await this.EXPOSE_dm_Products_GetByCategory.FromSqlRaw(sqlQuery , p_categoryId , p_query ).ToListAsync();

            //Return
            return lst;
        }

        public async Task<List<EXPOSE_dm_Streets_GetByCityIdResult>> EXPOSE_dm_Streets_GetByCityIdAsync(int? cityId,string query)
        {
            //Initialize Result 
            List<EXPOSE_dm_Streets_GetByCityIdResult> lst = new List<EXPOSE_dm_Streets_GetByCityIdResult>();

                // Parameters
                SqlParameter p_cityId = new SqlParameter("@cityId", cityId ?? (object)DBNull.Value);
                p_cityId.Direction = ParameterDirection.Input;
                p_cityId.DbType = DbType.Int32;
                p_cityId.Size = 4;

                SqlParameter p_query = new SqlParameter("@query", query ?? (object)DBNull.Value);
                p_query.Direction = ParameterDirection.Input;
                p_query.DbType = DbType.String;
                p_query.Size = -1;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Streets_GetByCityId] @cityId, @query";
                
                //Output Data
                lst = await this.EXPOSE_dm_Streets_GetByCityId.FromSqlRaw(sqlQuery , p_cityId , p_query ).ToListAsync();

            //Return
            return lst;
        }

        public async Task<List<EXPOSE_dm_Tokens_CheckResult>> EXPOSE_dm_Tokens_CheckAsync(string token)
        {
            //Initialize Result 
            List<EXPOSE_dm_Tokens_CheckResult> lst = new List<EXPOSE_dm_Tokens_CheckResult>();

                // Parameters
                SqlParameter p_token = new SqlParameter("@token", token ?? (object)DBNull.Value);
                p_token.Direction = ParameterDirection.Input;
                p_token.DbType = DbType.String;
                p_token.Size = -1;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Tokens_Check] @token";
                
                //Output Data
                lst = await this.EXPOSE_dm_Tokens_Check.FromSqlRaw(sqlQuery , p_token ).ToListAsync();

            //Return
            return lst;
        }

        public async Task<List<EXPOSE_dm_Users_LoginResult>> EXPOSE_dm_Users_LoginAsync(string login,string password,int? roleId)
        {
            //Initialize Result 
            List<EXPOSE_dm_Users_LoginResult> lst = new List<EXPOSE_dm_Users_LoginResult>();

                // Parameters
                SqlParameter p_login = new SqlParameter("@login", login ?? (object)DBNull.Value);
                p_login.Direction = ParameterDirection.Input;
                p_login.DbType = DbType.String;
                p_login.Size = -1;

                SqlParameter p_password = new SqlParameter("@password", password ?? (object)DBNull.Value);
                p_password.Direction = ParameterDirection.Input;
                p_password.DbType = DbType.String;
                p_password.Size = -1;

                SqlParameter p_roleId = new SqlParameter("@roleId", roleId ?? (object)DBNull.Value);
                p_roleId.Direction = ParameterDirection.Input;
                p_roleId.DbType = DbType.Int32;
                p_roleId.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Users_Login] @login, @password, @roleId";
                
                //Output Data
                lst = await this.EXPOSE_dm_Users_Login.FromSqlRaw(sqlQuery , p_login , p_password , p_roleId ).ToListAsync();

            //Return
            return lst;
        }

        public async Task<List<EXPOSE_dm_Users_RegisterResult>> EXPOSE_dm_Users_RegisterAsync(string firstName,string secondName,string lastName,string login,string password,int? roleId,string email)
        {
            //Initialize Result 
            List<EXPOSE_dm_Users_RegisterResult> lst = new List<EXPOSE_dm_Users_RegisterResult>();

                // Parameters
                SqlParameter p_firstName = new SqlParameter("@firstName", firstName ?? (object)DBNull.Value);
                p_firstName.Direction = ParameterDirection.Input;
                p_firstName.DbType = DbType.String;
                p_firstName.Size = 90;

                SqlParameter p_secondName = new SqlParameter("@secondName", secondName ?? (object)DBNull.Value);
                p_secondName.Direction = ParameterDirection.Input;
                p_secondName.DbType = DbType.String;
                p_secondName.Size = 90;

                SqlParameter p_lastName = new SqlParameter("@lastName", lastName ?? (object)DBNull.Value);
                p_lastName.Direction = ParameterDirection.Input;
                p_lastName.DbType = DbType.String;
                p_lastName.Size = 90;

                SqlParameter p_login = new SqlParameter("@login", login ?? (object)DBNull.Value);
                p_login.Direction = ParameterDirection.Input;
                p_login.DbType = DbType.String;
                p_login.Size = 90;

                SqlParameter p_password = new SqlParameter("@password", password ?? (object)DBNull.Value);
                p_password.Direction = ParameterDirection.Input;
                p_password.DbType = DbType.String;
                p_password.Size = 512;

                SqlParameter p_roleId = new SqlParameter("@roleId", roleId ?? (object)DBNull.Value);
                p_roleId.Direction = ParameterDirection.Input;
                p_roleId.DbType = DbType.Int32;
                p_roleId.Size = 4;

                SqlParameter p_email = new SqlParameter("@email", email ?? (object)DBNull.Value);
                p_email.Direction = ParameterDirection.Input;
                p_email.DbType = DbType.String;
                p_email.Size = 90;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Users_Register] @firstName, @secondName, @lastName, @login, @password, @roleId, @email";
                
                //Output Data
                lst = await this.EXPOSE_dm_Users_Register.FromSqlRaw(sqlQuery , p_firstName , p_secondName , p_lastName , p_login , p_password , p_roleId , p_email ).ToListAsync();

            //Return
            return lst;
        }

        public void FixExtendedProperties()
        {


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[FixExtendedProperties] ";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery );

            //Return
        }

        public void GetLinkedEntities(string table,string linkEntity,int? id)
        {

                // Parameters
                SqlParameter p_table = new SqlParameter("@table", table ?? (object)DBNull.Value);
                p_table.Direction = ParameterDirection.Input;
                p_table.DbType = DbType.String;
                p_table.Size = 256;

                SqlParameter p_linkEntity = new SqlParameter("@linkEntity", linkEntity ?? (object)DBNull.Value);
                p_linkEntity.Direction = ParameterDirection.Input;
                p_linkEntity.DbType = DbType.String;
                p_linkEntity.Size = 256;

                SqlParameter p_id = new SqlParameter("@id", id ?? (object)DBNull.Value);
                p_id.Direction = ParameterDirection.Input;
                p_id.DbType = DbType.Int32;
                p_id.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[GetLinkedEntities] @table, @linkEntity, @id";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_table , p_linkEntity , p_id );

            //Return
        }

        public async Task<List<SaveMessageResult>> SaveMessageAsync(string MessageId,string ParentId,string Author,string Payload,string Comment,bool? Offline)
        {
            //Initialize Result 
            List<SaveMessageResult> lst = new List<SaveMessageResult>();

                // Parameters
                SqlParameter p_MessageId = new SqlParameter("@MessageId", MessageId ?? (object)DBNull.Value);
                p_MessageId.Direction = ParameterDirection.Input;
                p_MessageId.DbType = DbType.String;
                p_MessageId.Size = 1024;

                SqlParameter p_ParentId = new SqlParameter("@ParentId", ParentId ?? (object)DBNull.Value);
                p_ParentId.Direction = ParameterDirection.Input;
                p_ParentId.DbType = DbType.String;
                p_ParentId.Size = 1024;

                SqlParameter p_Author = new SqlParameter("@Author", Author ?? (object)DBNull.Value);
                p_Author.Direction = ParameterDirection.Input;
                p_Author.DbType = DbType.String;
                p_Author.Size = 1024;

                SqlParameter p_Payload = new SqlParameter("@Payload", Payload ?? (object)DBNull.Value);
                p_Payload.Direction = ParameterDirection.Input;
                p_Payload.DbType = DbType.String;
                p_Payload.Size = -1;

                SqlParameter p_Comment = new SqlParameter("@Comment", Comment ?? (object)DBNull.Value);
                p_Comment.Direction = ParameterDirection.Input;
                p_Comment.DbType = DbType.String;
                p_Comment.Size = 2048;

                SqlParameter p_Offline = new SqlParameter("@Offline", Offline ?? (object)DBNull.Value);
                p_Offline.Direction = ParameterDirection.Input;
                p_Offline.DbType = DbType.Boolean;
                p_Offline.Size = 1;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[SaveMessage] @MessageId, @ParentId, @Author, @Payload, @Comment, @Offline";
                
                //Output Data
                lst = await this.SaveMessage.FromSqlRaw(sqlQuery , p_MessageId , p_ParentId , p_Author , p_Payload , p_Comment , p_Offline ).ToListAsync();

            //Return
            return lst;
        }

        public void SaveMessageDeliveryReport(int? ID,Byte? Result,string MessageID)
        {

                // Parameters
                SqlParameter p_ID = new SqlParameter("@ID", ID ?? (object)DBNull.Value);
                p_ID.Direction = ParameterDirection.Input;
                p_ID.DbType = DbType.Int32;
                p_ID.Size = 4;

                SqlParameter p_Result = new SqlParameter("@Result", Result ?? (object)DBNull.Value);
                p_Result.Direction = ParameterDirection.Input;
                p_Result.DbType = DbType.Byte;
                p_Result.Size = 1;

                SqlParameter p_MessageID = new SqlParameter("@MessageID", MessageID ?? (object)DBNull.Value);
                p_MessageID.Direction = ParameterDirection.Input;
                p_MessageID.DbType = DbType.String;
                p_MessageID.Size = 1024;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[SaveMessageDeliveryReport] @ID, @Result, @MessageID";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_ID , p_Result , p_MessageID );

            //Return
        }

        public async Task<List<SaveOutgoingMessageResult>> SaveOutgoingMessageAsync(string Destination,string Payload,bool? NoAuto,string Comment)
        {
            //Initialize Result 
            List<SaveOutgoingMessageResult> lst = new List<SaveOutgoingMessageResult>();

                // Parameters
                SqlParameter p_Destination = new SqlParameter("@Destination", Destination ?? (object)DBNull.Value);
                p_Destination.Direction = ParameterDirection.Input;
                p_Destination.DbType = DbType.String;
                p_Destination.Size = 1024;

                SqlParameter p_Payload = new SqlParameter("@Payload", Payload ?? (object)DBNull.Value);
                p_Payload.Direction = ParameterDirection.Input;
                p_Payload.DbType = DbType.String;
                p_Payload.Size = -1;

                SqlParameter p_NoAuto = new SqlParameter("@NoAuto", NoAuto ?? (object)DBNull.Value);
                p_NoAuto.Direction = ParameterDirection.Input;
                p_NoAuto.DbType = DbType.Boolean;
                p_NoAuto.Size = 1;

                SqlParameter p_Comment = new SqlParameter("@Comment", Comment ?? (object)DBNull.Value);
                p_Comment.Direction = ParameterDirection.Input;
                p_Comment.DbType = DbType.String;
                p_Comment.Size = 2048;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[SaveOutgoingMessage] @Destination, @Payload, @NoAuto, @Comment";
                
                //Output Data
                lst = await this.SaveOutgoingMessage.FromSqlRaw(sqlQuery , p_Destination , p_Payload , p_NoAuto , p_Comment ).ToListAsync();

            //Return
            return lst;
        }

        public void WriteLog(int? UserId,string EntityName,int? EntityId,Byte? ActionType,bool? Success,string Info)
        {

                // Parameters
                SqlParameter p_UserId = new SqlParameter("@UserId", UserId ?? (object)DBNull.Value);
                p_UserId.Direction = ParameterDirection.Input;
                p_UserId.DbType = DbType.Int32;
                p_UserId.Size = 4;

                SqlParameter p_EntityName = new SqlParameter("@EntityName", EntityName ?? (object)DBNull.Value);
                p_EntityName.Direction = ParameterDirection.Input;
                p_EntityName.DbType = DbType.String;
                p_EntityName.Size = 512;

                SqlParameter p_EntityId = new SqlParameter("@EntityId", EntityId ?? (object)DBNull.Value);
                p_EntityId.Direction = ParameterDirection.Input;
                p_EntityId.DbType = DbType.Int32;
                p_EntityId.Size = 4;

                SqlParameter p_ActionType = new SqlParameter("@ActionType", ActionType ?? (object)DBNull.Value);
                p_ActionType.Direction = ParameterDirection.Input;
                p_ActionType.DbType = DbType.Byte;
                p_ActionType.Size = 1;

                SqlParameter p_Success = new SqlParameter("@Success", Success ?? (object)DBNull.Value);
                p_Success.Direction = ParameterDirection.Input;
                p_Success.DbType = DbType.Boolean;
                p_Success.Size = 1;

                SqlParameter p_Info = new SqlParameter("@Info", Info ?? (object)DBNull.Value);
                p_Info.Direction = ParameterDirection.Input;
                p_Info.DbType = DbType.String;
                p_Info.Size = -1;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[WriteLog] @UserId, @EntityName, @EntityId, @ActionType, @Success, @Info";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_UserId , p_EntityName , p_EntityId , p_ActionType , p_Success , p_Info );

            //Return
        }

        public void WriteLogWithTime(int? UserId,string EntityName,int? EntityId,Byte? ActionType,bool? Success,string Info,DateTime? TimeStart,DateTime? TimeFinish)
        {

                // Parameters
                SqlParameter p_UserId = new SqlParameter("@UserId", UserId ?? (object)DBNull.Value);
                p_UserId.Direction = ParameterDirection.Input;
                p_UserId.DbType = DbType.Int32;
                p_UserId.Size = 4;

                SqlParameter p_EntityName = new SqlParameter("@EntityName", EntityName ?? (object)DBNull.Value);
                p_EntityName.Direction = ParameterDirection.Input;
                p_EntityName.DbType = DbType.String;
                p_EntityName.Size = 512;

                SqlParameter p_EntityId = new SqlParameter("@EntityId", EntityId ?? (object)DBNull.Value);
                p_EntityId.Direction = ParameterDirection.Input;
                p_EntityId.DbType = DbType.Int32;
                p_EntityId.Size = 4;

                SqlParameter p_ActionType = new SqlParameter("@ActionType", ActionType ?? (object)DBNull.Value);
                p_ActionType.Direction = ParameterDirection.Input;
                p_ActionType.DbType = DbType.Byte;
                p_ActionType.Size = 1;

                SqlParameter p_Success = new SqlParameter("@Success", Success ?? (object)DBNull.Value);
                p_Success.Direction = ParameterDirection.Input;
                p_Success.DbType = DbType.Boolean;
                p_Success.Size = 1;

                SqlParameter p_Info = new SqlParameter("@Info", Info ?? (object)DBNull.Value);
                p_Info.Direction = ParameterDirection.Input;
                p_Info.DbType = DbType.String;
                p_Info.Size = -1;

                SqlParameter p_TimeStart = new SqlParameter("@TimeStart", TimeStart ?? (object)DBNull.Value);
                p_TimeStart.Direction = ParameterDirection.Input;
                p_TimeStart.DbType = DbType.DateTime;
                p_TimeStart.Size = 8;

                SqlParameter p_TimeFinish = new SqlParameter("@TimeFinish", TimeFinish ?? (object)DBNull.Value);
                p_TimeFinish.Direction = ParameterDirection.Input;
                p_TimeFinish.DbType = DbType.DateTime;
                p_TimeFinish.Size = 8;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[WriteLogWithTime] @UserId, @EntityName, @EntityId, @ActionType, @Success, @Info, @TimeStart, @TimeFinish";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_UserId , p_EntityName , p_EntityId , p_ActionType , p_Success , p_Info , p_TimeStart , p_TimeFinish );

            //Return
        }


        public class EXPOSE_dm_Addresses_GetByStreetIdResult
        {
            public int id { get; set; }
            public string houseNumber { get; set; }
            public string postCode { get; set; }
            public decimal longitude { get; set; }
            public decimal lattitude { get; set; }
        }

        public class EXPOSE_dm_Cities_GetAllResult
        {
            public int id { get; set; }
            public string CityName { get; set; }
        }

        public class EXPOSE_dm_Orders_GetAllResult
        {
            public int orderId { get; set; }
            public string orderIdentifier { get; set; }
            public DateTime createdDate { get; set; }
            public int orderStatusId { get; set; }
            public string clientComment { get; set; }
            public bool? clientCommentIsRead { get; set; }
            public bool hasDelivery { get; set; }
            public string products { get; set; }
        }

        public class EXPOSE_dm_Orders_GetByIdResult
        {
            public int orderId { get; set; }
            public string orderIdentifier { get; set; }
            public decimal productCost { get; set; }
            public decimal deliveryCost { get; set; }
            public bool hasDelivery { get; set; }
            public bool cashPayment { get; set; }
            public string streetname { get; set; }
            public string houseNumber { get; set; }
            public decimal? longitude { get; set; }
            public decimal? lattitude { get; set; }
            public string products { get; set; }
        }

        public class EXPOSE_dm_Orders_GetInfoForPaymentResult
        {
            public int? totalAmount { get; set; }
            public int orderId { get; set; }
            public string buyer { get; set; }
            public string products { get; set; }
        }

        public class EXPOSE_dm_ProductCategories_GetAllResult
        {
            public int categoryId { get; set; }
            public string categoryName { get; set; }
            public string sizes { get; set; }
        }

        public class EXPOSE_dm_Products_GetAllResult
        {
            public int categoryId { get; set; }
            public string CategoryName { get; set; }
            public string sizes { get; set; }
            public string products { get; set; }
        }

        public class EXPOSE_dm_Products_GetByCategoryResult
        {
            public int? categoryId { get; set; }
            public string categoryName { get; set; }
            public string sizes { get; set; }
            public string products { get; set; }
        }

        public class EXPOSE_dm_Streets_GetByCityIdResult
        {
            public int id { get; set; }
            public string streetName { get; set; }
        }

        public class EXPOSE_dm_Tokens_CheckResult
        {
            public bool? isValid { get; set; }
        }

        public class EXPOSE_dm_Users_LoginResult
        {
            public string message { get; set; }
            public string token { get; set; }
        }

        public class EXPOSE_dm_Users_RegisterResult
        {
            public bool? isCreated { get; set; }
            public string message { get; set; }
            public int? userId { get; set; }
        }

        public class SaveMessageResult
        {
            public int? Col0 { get; set; }
        }

        public class SaveOutgoingMessageResult
        {
            public decimal? Col0 { get; set; }
        }

    }
}